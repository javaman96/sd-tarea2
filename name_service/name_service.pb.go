// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: name_service.proto

package name_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_name_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_name_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_name_service_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type LibroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombre string `protobuf:"bytes,1,opt,name=nombre,proto3" json:"nombre,omitempty"`
}

func (x *LibroInfo) Reset() {
	*x = LibroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_name_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibroInfo) ProtoMessage() {}

func (x *LibroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_name_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibroInfo.ProtoReflect.Descriptor instead.
func (*LibroInfo) Descriptor() ([]byte, []int) {
	return file_name_service_proto_rawDescGZIP(), []int{1}
}

func (x *LibroInfo) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

// Libro mas su numero de chunks, necesario para crear una propuesta
type LibroNumeroChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombre         string `protobuf:"bytes,1,opt,name=nombre,proto3" json:"nombre,omitempty"`
	Cantidadchunks int32  `protobuf:"varint,2,opt,name=cantidadchunks,proto3" json:"cantidadchunks,omitempty"`
}

func (x *LibroNumeroChunk) Reset() {
	*x = LibroNumeroChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_name_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibroNumeroChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibroNumeroChunk) ProtoMessage() {}

func (x *LibroNumeroChunk) ProtoReflect() protoreflect.Message {
	mi := &file_name_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibroNumeroChunk.ProtoReflect.Descriptor instead.
func (*LibroNumeroChunk) Descriptor() ([]byte, []int) {
	return file_name_service_proto_rawDescGZIP(), []int{2}
}

func (x *LibroNumeroChunk) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

func (x *LibroNumeroChunk) GetCantidadchunks() int32 {
	if x != nil {
		return x.Cantidadchunks
	}
	return 0
}

type ListadoLibros struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Libros []*LibroInfo `protobuf:"bytes,1,rep,name=libros,proto3" json:"libros,omitempty"`
}

func (x *ListadoLibros) Reset() {
	*x = ListadoLibros{}
	if protoimpl.UnsafeEnabled {
		mi := &file_name_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListadoLibros) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListadoLibros) ProtoMessage() {}

func (x *ListadoLibros) ProtoReflect() protoreflect.Message {
	mi := &file_name_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListadoLibros.ProtoReflect.Descriptor instead.
func (*ListadoLibros) Descriptor() ([]byte, []int) {
	return file_name_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListadoLibros) GetLibros() []*LibroInfo {
	if x != nil {
		return x.Libros
	}
	return nil
}

type ChunkIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombrechunk string `protobuf:"bytes,1,opt,name=nombrechunk,proto3" json:"nombrechunk,omitempty"`
	Ipmaquina   string `protobuf:"bytes,2,opt,name=ipmaquina,proto3" json:"ipmaquina,omitempty"`
}

func (x *ChunkIp) Reset() {
	*x = ChunkIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_name_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkIp) ProtoMessage() {}

func (x *ChunkIp) ProtoReflect() protoreflect.Message {
	mi := &file_name_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkIp.ProtoReflect.Descriptor instead.
func (*ChunkIp) Descriptor() ([]byte, []int) {
	return file_name_service_proto_rawDescGZIP(), []int{4}
}

func (x *ChunkIp) GetNombrechunk() string {
	if x != nil {
		return x.Nombrechunk
	}
	return ""
}

func (x *ChunkIp) GetIpmaquina() string {
	if x != nil {
		return x.Ipmaquina
	}
	return ""
}

type DistribucionChunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombrelibro string     `protobuf:"bytes,1,opt,name=nombrelibro,proto3" json:"nombrelibro,omitempty"`
	Chunks      []*ChunkIp `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *DistribucionChunks) Reset() {
	*x = DistribucionChunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_name_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistribucionChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistribucionChunks) ProtoMessage() {}

func (x *DistribucionChunks) ProtoReflect() protoreflect.Message {
	mi := &file_name_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistribucionChunks.ProtoReflect.Descriptor instead.
func (*DistribucionChunks) Descriptor() ([]byte, []int) {
	return file_name_service_proto_rawDescGZIP(), []int{5}
}

func (x *DistribucionChunks) GetNombrelibro() string {
	if x != nil {
		return x.Nombrelibro
	}
	return ""
}

func (x *DistribucionChunks) GetChunks() []*ChunkIp {
	if x != nil {
		return x.Chunks
	}
	return nil
}

var File_name_service_proto protoreflect.FileDescriptor

var file_name_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x23, 0x0a, 0x09, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x6d, 0x62, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x6d, 0x62,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x74,
	0x69, 0x64, 0x61, 0x64, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x61, 0x64, 0x6f, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x6c,
	0x69, 0x62, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x22, 0x49, 0x0a, 0x07,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x6d, 0x62, 0x72,
	0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f,
	0x6d, 0x62, 0x72, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x6d,
	0x61, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x6d, 0x61, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x22, 0x65, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x63, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x12,
	0x2d, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x70, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x32, 0xc2,
	0x02, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x15, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x15, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x50, 0x65,
	0x64, 0x69, 0x72, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x73,
	0x12, 0x15, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x4c, 0x69,
	0x62, 0x72, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x50, 0x65, 0x64, 0x69, 0x72, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x17, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x20, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x63, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x20, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x63, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a,
	0x20, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x63, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_name_service_proto_rawDescOnce sync.Once
	file_name_service_proto_rawDescData = file_name_service_proto_rawDesc
)

func file_name_service_proto_rawDescGZIP() []byte {
	file_name_service_proto_rawDescOnce.Do(func() {
		file_name_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_name_service_proto_rawDescData)
	})
	return file_name_service_proto_rawDescData
}

var file_name_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_name_service_proto_goTypes = []interface{}{
	(*Message)(nil),            // 0: name_service.Message
	(*LibroInfo)(nil),          // 1: name_service.LibroInfo
	(*LibroNumeroChunk)(nil),   // 2: name_service.LibroNumeroChunk
	(*ListadoLibros)(nil),      // 3: name_service.ListadoLibros
	(*ChunkIp)(nil),            // 4: name_service.ChunkIp
	(*DistribucionChunks)(nil), // 5: name_service.DistribucionChunks
}
var file_name_service_proto_depIdxs = []int32{
	1, // 0: name_service.ListadoLibros.libros:type_name -> name_service.LibroInfo
	4, // 1: name_service.DistribucionChunks.chunks:type_name -> name_service.ChunkIp
	0, // 2: name_service.NameService.SayHello:input_type -> name_service.Message
	0, // 3: name_service.NameService.PedirNombresLibros:input_type -> name_service.Message
	1, // 4: name_service.NameService.PedirChunksLibro:input_type -> name_service.LibroInfo
	5, // 5: name_service.NameService.SolicitarPropuesta:input_type -> name_service.DistribucionChunks
	0, // 6: name_service.NameService.SayHello:output_type -> name_service.Message
	3, // 7: name_service.NameService.PedirNombresLibros:output_type -> name_service.ListadoLibros
	5, // 8: name_service.NameService.PedirChunksLibro:output_type -> name_service.DistribucionChunks
	5, // 9: name_service.NameService.SolicitarPropuesta:output_type -> name_service.DistribucionChunks
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_name_service_proto_init() }
func file_name_service_proto_init() {
	if File_name_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_name_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_name_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_name_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibroNumeroChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_name_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListadoLibros); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_name_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_name_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistribucionChunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_name_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_name_service_proto_goTypes,
		DependencyIndexes: file_name_service_proto_depIdxs,
		MessageInfos:      file_name_service_proto_msgTypes,
	}.Build()
	File_name_service_proto = out.File
	file_name_service_proto_rawDesc = nil
	file_name_service_proto_goTypes = nil
	file_name_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NameServiceClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	PedirNombresLibros(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ListadoLibros, error)
	PedirChunksLibro(ctx context.Context, in *LibroInfo, opts ...grpc.CallOption) (*DistribucionChunks, error)
	SolicitarPropuesta(ctx context.Context, in *DistribucionChunks, opts ...grpc.CallOption) (*DistribucionChunks, error)
}

type nameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServiceClient(cc grpc.ClientConnInterface) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/name_service.NameService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) PedirNombresLibros(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ListadoLibros, error) {
	out := new(ListadoLibros)
	err := c.cc.Invoke(ctx, "/name_service.NameService/PedirNombresLibros", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) PedirChunksLibro(ctx context.Context, in *LibroInfo, opts ...grpc.CallOption) (*DistribucionChunks, error) {
	out := new(DistribucionChunks)
	err := c.cc.Invoke(ctx, "/name_service.NameService/PedirChunksLibro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) SolicitarPropuesta(ctx context.Context, in *DistribucionChunks, opts ...grpc.CallOption) (*DistribucionChunks, error) {
	out := new(DistribucionChunks)
	err := c.cc.Invoke(ctx, "/name_service.NameService/SolicitarPropuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServiceServer is the server API for NameService service.
type NameServiceServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	PedirNombresLibros(context.Context, *Message) (*ListadoLibros, error)
	PedirChunksLibro(context.Context, *LibroInfo) (*DistribucionChunks, error)
	SolicitarPropuesta(context.Context, *DistribucionChunks) (*DistribucionChunks, error)
}

// UnimplementedNameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNameServiceServer struct {
}

func (*UnimplementedNameServiceServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedNameServiceServer) PedirNombresLibros(context.Context, *Message) (*ListadoLibros, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedirNombresLibros not implemented")
}
func (*UnimplementedNameServiceServer) PedirChunksLibro(context.Context, *LibroInfo) (*DistribucionChunks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedirChunksLibro not implemented")
}
func (*UnimplementedNameServiceServer) SolicitarPropuesta(context.Context, *DistribucionChunks) (*DistribucionChunks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarPropuesta not implemented")
}

func RegisterNameServiceServer(s *grpc.Server, srv NameServiceServer) {
	s.RegisterService(&_NameService_serviceDesc, srv)
}

func _NameService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/name_service.NameService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_PedirNombresLibros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).PedirNombresLibros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/name_service.NameService/PedirNombresLibros",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).PedirNombresLibros(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_PedirChunksLibro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LibroInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).PedirChunksLibro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/name_service.NameService/PedirChunksLibro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).PedirChunksLibro(ctx, req.(*LibroInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_SolicitarPropuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistribucionChunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).SolicitarPropuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/name_service.NameService/SolicitarPropuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).SolicitarPropuesta(ctx, req.(*DistribucionChunks))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "name_service.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _NameService_SayHello_Handler,
		},
		{
			MethodName: "PedirNombresLibros",
			Handler:    _NameService_PedirNombresLibros_Handler,
		},
		{
			MethodName: "PedirChunksLibro",
			Handler:    _NameService_PedirChunksLibro_Handler,
		},
		{
			MethodName: "SolicitarPropuesta",
			Handler:    _NameService_SolicitarPropuesta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "name_service.proto",
}
